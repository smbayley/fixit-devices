{"version":3,"sources":["components/Device.js","components/DeviceCollection.js","Db.js","App.js","serviceWorker.js","index.js"],"names":["Device","getStyle","backgroundColor","padding","borderBottom","name","this","props","device","style","Component","Database","require","COLL_DEVICES","getCollection","collection_name","db","collection","fetch","get","then","_parse_response","catch","err","console","log","message","response","body","zango","Db","DatabaseFactory","instance","getInstance","constructor","App","_get_session","match","document","cookie","sid","Array","substring","n_chars","Math","random","toString","_setup_db","force_fetch","need_fetch","today","Date","fetch_key","sessionId","last_fetch","storage","getItem","parse","elapsed","getTime","elapsed_days","database","setItem","state","loginPage","mainPage","window","localStorage","className","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mPA2BeA,E,2MAvBXC,SAAW,WACP,MAAO,CACHC,gBAAiB,UACjBC,QAAS,OACTC,aAAc,oB,wEAIZ,IACEC,EAASC,KAAKC,MAAMC,OAApBH,KACR,OACI,yBAAKI,MAAOH,KAAKL,YACb,+BAAMI,EAAN,U,GAbKK,a,GCCUA,Y,gBCUzBC,GAFaC,EAAQ,IAK1B,aAAe,IAAD,gCAFdC,aAAe,UAED,KAIXC,cAAgB,SAACC,GACb,OAAO,EAAKC,GAAGC,WAAWF,IALnB,KAQXG,MAAQ,WACSN,EAAQ,IAEhBO,IAAI,6CACPC,KAAK,EAAKC,iBACbC,MAAM,SAAAC,GACHC,QAAQC,IAAIF,EAAIG,YAdX,KAmBXL,gBAAkB,SAAAM,GACjBH,QAAQC,IAAIE,EAASC,OAnBxBtB,KAAKU,GAAK,IAAIa,IAAMC,GAAG,WAAY,CAAC,UAAW,eAsClCC,EAfQ,WACtB,IAAIC,EAEJ,MAAO,CACNC,YAAa,WAMZ,OALgB,MAAZD,KACHA,EAAW,IAAIrB,GACNuB,YAAc,MAGjBF,IAVa,GC4CRG,G,mBA5Eb,WAAY5B,GAAQ,IAAD,8BACjB,4CAAMA,KAYR6B,aAAe,WACb,IACIC,EAAQC,SAASC,OAAOF,MAAM,iBAC9BG,EAAM,GAmBV,OAjBa,MAATH,GAGAG,EADEH,aAAiBI,MACbJ,EAAM,GAAGK,UAAUC,GAEnBN,EAAMK,UAAUC,GAExBnB,QAAQC,IAAI,wBAA0Be,KAItCA,EAAMI,KAAKC,SAASC,SAAS,IAAIJ,UAAUC,GAC3CL,SAASC,OAAS,UAAYC,EAE9BhB,QAAQC,IAAI,wBAA0Be,IAGjCA,GAnCU,EAsCnBO,UAAY,WAAwB,IAAvBC,EAAsB,wDAC7BC,GAAa,EACbC,EAAQ,IAAIC,KAEhB,IAAKH,EACL,CAEE,IAAII,EAAY,EAAKC,UAAY,SAC7BC,EAAa,EAAKC,QAAQC,QAAQJ,GACtC,GAAkB,MAAdE,EACJ,CACIA,EAAaH,KAAKM,MAAMH,GACxB,IAAII,GAAWR,EAAMS,UAAYL,GAAc,IAC3CM,EAAeF,EAAO,MAEtBE,GAAgB,IAClBX,GAAa,IAIjBA,IAEF,EAAKY,SAAS3C,QACd,EAAKqC,QAAQO,QAAQ,EAAKT,UAAY,SAAUH,EAAMJ,cA3DxD,EAAKiB,MAAQ,CACTC,UAAW,GACXC,SAAU,IAGd,EAAKV,QAAUW,OAAOC,aACtB,EAAKN,SAAW9B,EAAgBE,cAChC,EAAKoB,UAAY,EAAKjB,eACtB,EAAKW,WAAU,GAVE,E,sEAkEjB,OACI,yBAAKqB,UAAU,Y,GApEL1D,cCIE2D,QACW,cAA7BH,OAAOI,SAASC,UAEe,UAA7BL,OAAOI,SAASC,UAEhBL,OAAOI,SAASC,SAASlC,MACvB,2DCZNmC,IAASC,OAAO,kBAAC,EAAD,MAASnC,SAASoC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzD,KAAK,SAAA0D,GACjCA,EAAaC,gB","file":"static/js/main.4eeb26eb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Device extends Component {\n    getStyle = () => {\n        return {\n            backgroundColor: \"#f4f4f4\",\n            padding: '10px',\n            borderBottom: '1px #ccc dotted'\n        }\n    }\n\n    render() {\n        const { name } = this.props.device;\n        return (\n            <div style={this.getStyle()}>\n                <p> { name } </p>\n            </div>\n        )\n    }\n}\n\nDevice.propTypes = {\n    device: PropTypes.object.isRequired\n}\n\n\nexport default Device;","import React, { Component } from 'react';\nimport Device from './Device';\nimport PropTypes from 'prop-types';\n\nclass DeviceCollection extends Component {\n    render() {\n        return this.props.devices.map((device) => (\n            <Device key={device.id} device={device}/>\n        ));\n    }\n}\n\nDeviceCollection.propTypes = {\n    devices: PropTypes.array.isRequired\n}\n\nexport default DeviceCollection;","import zango from 'zangodb';\n\n\n// todo: need to check to see if collection already exists.\n//  if not, retrieve from ifixit\n//  if so, don't do anything. maybe check count?\n// let devices = this.database.collection('devices');\n//\n// devices.insert(this.state.devices).then(() => {\n//     return devices.find({include: true}).forEach(doc => console.log('doc:' , doc))\n// });\n\nconst superagent = require('superagent');\n\nclass Database {\n\tCOLL_DEVICES = 'devices';\n\n\tconstructor() {\n\t\tthis.db = new zango.Db('devicedb', ['devices', 'selected'])\n\t}\n\n    getCollection = (collection_name) => {\n        return this.db.collection(collection_name);\n    }\n\n    fetch = () => {\n    \tconst request = require('superagent');\n\n    \trequest.get('https://www.ifixit.com/api/2.0/categories')\n    \t\t\t  .then(this._parse_response)\n\t\t\t\t  .catch(err => {\n\t\t\t\t      console.log(err.message);\n\t\t\t\t   });\n\n    }\n\n    _parse_response = response => {\n    \tconsole.log(response.body);\n    }\n}\n\nvar DatabaseFactory = (function() {\n\tvar instance;\n\n\treturn {\n\t\tgetInstance: function() {\n\t\t\tif (instance == null) {\n\t\t\t\tinstance = new Database();\n\t\t\t\tinstance.constructor = null;\n\t\t\t}\n\n\t\t\treturn instance;\n\t\t}\n\t}\n})();\n\nexport default DatabaseFactory;","import React, { Component } from 'react';\n\nimport DeviceCollection from './components/DeviceCollection'\nimport DatabaseFactory from './Db'\nimport './App.css';\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        loginPage: [],\n        mainPage: []\n      };\n\n    this.storage = window.localStorage;\n    this.database = DatabaseFactory.getInstance();\n    this.sessionId = this._get_session();\n    this._setup_db(false);\n  }\n\n  _get_session = () => {\n    var n_chars = 6;\n    var match = document.cookie.match(/if_sid=(.*);?/);\n    var sid = ''\n\n    if (match != null) \n    {\n      if (match instanceof Array)\n        sid = match[0].substring(n_chars + 1)\n      else\n        sid = match.substring(n_chars + 1)\n\n      console.log('retrieved sessionId: ' + sid);\n    }\n    else\n    {\n      sid = Math.random().toString(36).substring(n_chars + 1);\n      document.cookie = 'if_sid=' + sid;\n\n      console.log('generated sessionId: ' + sid);\n    }\n\n    return sid;\n  }\n\n  _setup_db = (force_fetch=false) => {\n    var need_fetch = true;\n    var today = new Date();\n\n    if (!force_fetch)\n    {\n      // we'll do a fetch only if it hasn't been done in the last 48 hours\n      var fetch_key = this.sessionId + '_fetch';\n      var last_fetch = this.storage.getItem(fetch_key);\n      if (last_fetch != null)\n      {\n          last_fetch = Date.parse(last_fetch);\n          var elapsed = (today.getTime() - last_fetch) / 1000;\n          var elapsed_days = elapsed / (60 * 60 * 24)\n\n          if (elapsed_days <= 2)\n            need_fetch = false;\n      }\n    }\n\n    if (need_fetch)\n    {\n      this.database.fetch();\n      this.storage.setItem(this.sessionId + '_fetch', today.toString());\n    }\n  }\n\n  render() {\n    return (\n        <div className=\"App\">\n          \n        </div>\n    );\n  }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}